{"ast":null,"code":"var _jsxFileName = \"/home/fede459/Documentos/EDEP-MODULO 3/Proyectos/Challenge 01/src/components/ColorPicker.jsx\",\n    _s = $RefreshSig$();\n\nimport { Component, useState, useEffect } from \"react\";\nimport Color from \"./Color\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst color = [{\n  id: 1,\n  name: 'Rojo',\n  hex: '#BF0603'\n}, {\n  id: 2,\n  name: 'Anaranjado',\n  hex: '#C43721'\n}, {\n  id: 3,\n  name: 'Amarillo',\n  hex: '#ffd60a'\n}]; //COMPONENTE FUNCIONAL\n\n/*\nconst ColorList = () => {\n\n    const [colorList, setColorList] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n\n    const cargarColores = () => {\n        setIsLoading(true)\n        setTimeout(() => {\n            setColorList(colors)\n            setIsLoading(false)\n        }, 3000);\n    }\n    return (\n        <>\n            <button onClick={() => cargarColores()}>Click me</button>\n            {\n                isLoading &&\n                <h1>Loading</h1>}\n            <div>\n                {\n                    //map sirve para iterar una lista\n                    colorList.map(color =>\n                        <Color name={color.name} hex={color.hex} key={color.id} id={color.id} />\n                    )\n                }\n            </div>\n        </>\n    );\n}\n    */\n//COMPONENTE DE CLASE\n\n/* class ColorList extends Component {\n    constructor() {\n        super()\n        this.state = {\n            colorList: [],\n            isLoading: false\n        }\n    }\n    render() {\n                const cargarColores = () => {\n                    this.setState({ isLoading: true })\n                    setTimeout(() => {\n                        this.setState({\n                            colorList: colors,\n                            isLoading: false\n                        })\n                    }, 3000);\n                }\n                const { colorList, isLoading } = this.state\n                return (\n                    <>\n                        <button onClick={() => cargarColores()}>Click me</button>\n                        {\n                            isLoading &&\n                            <h1>Loading</h1>}\n                        <div>\n                            {\n                                //map sirve para iterar una lista\n                                colorList.map(color =>\n                                    <Color name={color.name} hex={color.hex} key={color.id} id={color.id} />\n                                )\n                            }\n                        </div>\n                    </>\n                );\n            }\n        \n        }\n         */\n\nconst ColorPicker = () => {\n  _s();\n\n  const [backgroundColor, setBackgroundColor] = useState('white');\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    setIsLoading(true);\n    const timeOut = setTimeout(() => {\n      setColorList(colors);\n      setIsLoading(false);\n    }, 2000);\n    return () => {\n      clearTimeout(timeOut);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page\",\n    style: {\n      backgroundColor\n    },\n    children: [isLoading && /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"loading-text\",\n      children: \"Loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 27\n    }, this), colorList.map(color => /*#__PURE__*/_jsxDEV(Color, {\n      hex: color.hex,\n      name: color.name,\n      setBackgroundColor: setBackgroundColor\n    }, color.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ColorPicker, \"SVriR981OSa8Kci7EdGBw0o4CVc=\");\n\n_c = ColorPicker;\nexport default ColorPicker;\n\nvar _c;\n\n$RefreshReg$(_c, \"ColorPicker\");","map":{"version":3,"names":["Component","useState","useEffect","Color","color","id","name","hex","ColorPicker","backgroundColor","setBackgroundColor","isLoading","setIsLoading","timeOut","setTimeout","setColorList","colors","clearTimeout","colorList","map"],"sources":["/home/fede459/Documentos/EDEP-MODULO 3/Proyectos/Challenge 01/src/components/ColorPicker.jsx"],"sourcesContent":["import { Component, useState, useEffect } from \"react\";\nimport Color from \"./Color\";\n\nconst color = [\n    {\n        id: 1,\n        name: 'Rojo',\n        hex: '#BF0603'\n    },\n    {\n        id: 2,\n        name: 'Anaranjado',\n        hex: '#C43721'\n    },\n    {\n        id: 3,\n        name: 'Amarillo',\n        hex: '#ffd60a'\n    }\n];\n//COMPONENTE FUNCIONAL\n/*\nconst ColorList = () => {\n\n    const [colorList, setColorList] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n\n    const cargarColores = () => {\n        setIsLoading(true)\n        setTimeout(() => {\n            setColorList(colors)\n            setIsLoading(false)\n        }, 3000);\n    }\n    return (\n        <>\n            <button onClick={() => cargarColores()}>Click me</button>\n            {\n                isLoading &&\n                <h1>Loading</h1>}\n            <div>\n                {\n                    //map sirve para iterar una lista\n                    colorList.map(color =>\n                        <Color name={color.name} hex={color.hex} key={color.id} id={color.id} />\n                    )\n                }\n            </div>\n        </>\n    );\n}\n    */\n//COMPONENTE DE CLASE\n\n/* class ColorList extends Component {\n    constructor() {\n        super()\n        this.state = {\n            colorList: [],\n            isLoading: false\n        }\n    }\n    render() {\n                const cargarColores = () => {\n                    this.setState({ isLoading: true })\n                    setTimeout(() => {\n                        this.setState({\n                            colorList: colors,\n                            isLoading: false\n                        })\n                    }, 3000);\n                }\n                const { colorList, isLoading } = this.state\n                return (\n                    <>\n                        <button onClick={() => cargarColores()}>Click me</button>\n                        {\n                            isLoading &&\n                            <h1>Loading</h1>}\n                        <div>\n                            {\n                                //map sirve para iterar una lista\n                                colorList.map(color =>\n                                    <Color name={color.name} hex={color.hex} key={color.id} id={color.id} />\n                                )\n                            }\n                        </div>\n                    </>\n                );\n            }\n        \n        }\n         */\nconst ColorPicker = () => {\n    const [backgroundColor, setBackgroundColor] = useState('white')\n    const [isLoading, setIsLoading ] = useState(false);\n\n    useEffect(() => {\n\t    setIsLoading(true)\n\t    const timeOut = setTimeout(() => {\n\t      setColorList(colors)\n\t      setIsLoading(false)\n\t    }, 2000)\n\t    return () => {\n\t      clearTimeout(timeOut)\n\t    }\n\t  }, []);\n\n    return (\n        <div className='page' style={{ backgroundColor }}>\n            {isLoading && <span className='loading-text'>Loading</span>}\n            {colorList.map((color) => (\n                <Color\n                    key={color.id}\n                    hex={color.hex}\n                    name={color.name}\n                    setBackgroundColor={setBackgroundColor}\n                />\n            ))}\n        </div>\n    );\n}\nexport default ColorPicker;\n"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,EAA8BC,SAA9B,QAA+C,OAA/C;AACA,OAAOC,KAAP,MAAkB,SAAlB;;AAEA,MAAMC,KAAK,GAAG,CACV;EACIC,EAAE,EAAE,CADR;EAEIC,IAAI,EAAE,MAFV;EAGIC,GAAG,EAAE;AAHT,CADU,EAMV;EACIF,EAAE,EAAE,CADR;EAEIC,IAAI,EAAE,YAFV;EAGIC,GAAG,EAAE;AAHT,CANU,EAWV;EACIF,EAAE,EAAE,CADR;EAEIC,IAAI,EAAE,UAFV;EAGIC,GAAG,EAAE;AAHT,CAXU,CAAd,C,CAiBA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,WAAW,GAAG,MAAM;EAAA;;EACtB,MAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCT,QAAQ,CAAC,OAAD,CAAtD;EACA,MAAM,CAACU,SAAD,EAAYC,YAAZ,IAA6BX,QAAQ,CAAC,KAAD,CAA3C;EAEAC,SAAS,CAAC,MAAM;IACfU,YAAY,CAAC,IAAD,CAAZ;IACA,MAAMC,OAAO,GAAGC,UAAU,CAAC,MAAM;MAC/BC,YAAY,CAACC,MAAD,CAAZ;MACAJ,YAAY,CAAC,KAAD,CAAZ;IACD,CAHyB,EAGvB,IAHuB,CAA1B;IAIA,OAAO,MAAM;MACXK,YAAY,CAACJ,OAAD,CAAZ;IACD,CAFD;EAGD,CATS,EASP,EATO,CAAT;EAWA,oBACI;IAAK,SAAS,EAAC,MAAf;IAAsB,KAAK,EAAE;MAAEJ;IAAF,CAA7B;IAAA,WACKE,SAAS,iBAAI;MAAM,SAAS,EAAC,cAAhB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADlB,EAEKO,SAAS,CAACC,GAAV,CAAef,KAAD,iBACX,QAAC,KAAD;MAEI,GAAG,EAAEA,KAAK,CAACG,GAFf;MAGI,IAAI,EAAEH,KAAK,CAACE,IAHhB;MAII,kBAAkB,EAAEI;IAJxB,GACSN,KAAK,CAACC,EADf;MAAA;MAAA;MAAA;IAAA,QADH,CAFL;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAaH,CA5BD;;GAAMG,W;;KAAAA,W;AA6BN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}